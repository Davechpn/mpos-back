// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//env("DATABASE_URL")

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
  output   = "ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/testdb?schema=public"
}

//DOMAIN MODELS //////////////////////////////////////////////////////////////
model Industry {
  id         String      @id @default(uuid())
  name       String      @unique
  Promotions Promotion[]
  Category   Category    @relation(fields: [CategoryId], references: [id])
  CategoryId String
}

model Country {
  id            String          @id @default(uuid())
  name          String          @unique
  User          User[]
  Promotions    Promotion[]
  BrandTemplate BrandTemplate[]
}

//DOMAIN MODELS //////////////////////////////////////////////////////////////
//
//
//
//
//
//INTERNAL MODELS ////////////////////////////////////////////////////////////
model User {
  id                String          @id @default(uuid())
  name              String
  email             String          @unique
  avatar            String?
  role              Role?           @relation(fields: [roleId], references: [id])
  roleId            String?
  teams             Team[]
  suspendendAt      DateTime?
  status            UserStatus
  streetAddress     String?
  city              String?
  cell              String?
  tell              String?
  verificationCode  Int?
  createdAt         DateTime        @default(now())
  country           Country?        @relation(fields: [countryId], references: [id])
  countryId         String?
  AssignedTasks     Task[]          @relation("AssignedTasks")
  CreatedTasks      Task[]          @relation("CreatedTasks")
  Promotion         Promotion[]
  Payment           Payment[]
  CreatedTemplates  BrandTemplate[] @relation("CreatedTemplates")
  ReviewedTemplates BrandTemplate[] @relation("ReviewedTemplates")
}

model Role {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  permissions Permissions[]
  User        User[]
}

model Permissions {
  id          String          @id @default(uuid())
  domain      String          @unique
  accessLevel PermissionTypes @default(Viewer)
  Role        Role[]
}

model Team {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  leader    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Goals     Goal[]
}

model Goal {
  id          String    @id @default(uuid())
  teams       Team[]
  title       String    @unique
  description String?
  startDate   DateTime?
  createdAt   DateTime  @default(now())
  deadline    DateTime?
  active      Boolean?
  isComplete  Boolean?
  tasks       Task[]
}

model Task {
  id          String        @id @default(uuid())
  title       String        @unique
  comments    String?
  createdAt   DateTime      @default(now())
  startDate   DateTime?
  dueDate     DateTime?
  priority    TaskPriority?
  stage       TaskStage?
  Goal        Goal?         @relation(fields: [GoalId], references: [id])
  GoalId      String?
  assignee    User?         @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdBy   User?         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String?
}

enum PermissionTypes {
  Viewer
  Editor
  Admin
}

enum TaskStage {
  complete
  inProgress
  todo
}

enum TaskPriority {
  low
  medium
  high
}

enum UserStatus {
  active
  suspendend
  invited
}

//INTERNAL MODELS ///////////////////////////////////////////////////////////
//
//
//
//
//CLIENTS MODELS ////////////////////////////////////////////////////////////
//CLIENTS MODELS ////////////////////////////////////////////////////////////
//
//
//
//
//PREMIUMS MODELS ////////////////////////////////////////////////////////////
model Feature {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  type        String
  industries  String[]
  countries   String[]
  Promotions  Promotion[]
}

model Package {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       PackagePrice[]
  features    String[]
  color       String?
  level       Int
  Promotion   Promotion?
  Payment     Payment[]
}

model PackagePrice {
  id             String   @id @default(uuid())
  duration       BigInt
  amount         Float
  extention_time BigInt?
  Package        Package? @relation(fields: [packageId], references: [id])
  packageId      String?
}

model Promotion {
  id          String     @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  features    Feature[]
  industries  Industry[]
  countries   Country[]
  package     Package?   @relation(fields: [packageId], references: [id])
  packageId   String?    @unique
  createdBy   User?      @relation(fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime   @default(now())
}

model Payment {
  id            String   @id @default(uuid())
  amount        Decimal
  date          DateTime
  center        String?
  package       Package  @relation(fields: [packageId], references: [id])
  packageId     String
  paymentMethod String
  cashier       User     @relation(fields: [cashierId], references: [id])
  cashierId     String
  revoked       Boolean?
  createAt      DateTime @default(now())
}

//PREMIUMS MODELS ////////////////////////////////////////////////////////////
//
//
//
//
//TEMPLATES MODELS //////////////////////////////////////////////////////////////

model Category {
  id            String          @id @default(uuid())
  name          String
  description   String
  icon          String
  industries    Industry[]
  createdBy     String
  createdAt     DateTime        @default(now())
  BrandTemplate BrandTemplate[]
}

model Image {
  id                String          @id @default(uuid())
  url               String
  incomplete        Boolean
  incompleteMessage String
  isTransparent     Boolean
  side              ImageSide       @default(front)
  BrandTemplate     BrandTemplate[]
}

enum ImageSide {
  front
  left
  right
  back
  inside
}

enum DraftType {
  FromClient
  InProgress
  Rejected
  Review
  ClientEdits
}

enum DarftSources {
  Client
  Mine
  Reviewer
  Admin
}

model ClientEdit {
  id              String        @id @default(uuid())
  clientId        String
  action          String
  field           String
  newValue        String
  oldValue        String
  approved        Boolean
  approvedTime    DateTime
  approvedBy      String
  reviewed        Boolean
  reviewedBy      String
  reviewedAt      DateTime
  BrandTemplate   BrandTemplate @relation(fields: [BrandTemplateId], references: [id])
  BrandTemplateId String
}

model ClientRating {
  id                String        @id @default(uuid())
  client_id         String
  rating            Int
  goodImplematation Boolean
  comment           String
  BrandTemplate     BrandTemplate @relation(fields: [BrandTemplateId], references: [id])
  BrandTemplateId   String
}

model Tel {
  id              String        @id @default(uuid())
  name            String
  number          String
  BrandTemplate   BrandTemplate @relation(fields: [BrandTemplateId], references: [id])
  BrandTemplateId String
}

model BrandTemplate {
  id                     String         @id @default(uuid())
  name                   String
  description            String
  tags                   String[]
  image                  Image          @relation(fields: [imageId], references: [id])
  imageId                String
  threeDImage            String
  video                  String
  sizes                  String[]
  units                  String[]
  category               Category       @relation(fields: [categoryId], references: [id])
  categoryId             String
  addon_categories       String[]
  varieties              String[]
  manufacturer           String
  street_address         String
  city                   String
  country                Country        @relation(fields: [countryId], references: [id])
  countryId              String
  email                  String
  telNumbers             Tel[]
  website                String
  draftNotes             String
  draftType              String
  draftCreatedAt         DateTime
  createdBy              User           @relation("CreatedTemplates", fields: [createdById], references: [id])
  createdById            String
  createdAt              DateTime       @default(now())
  reviewedAt             DateTime
  reviewNotes            String
  reviewer               User           @relation("ReviewedTemplates", fields: [reviewerId], references: [id])
  reviewerId             String
  inReview               Boolean
  isApproved             Boolean
  lastModified           DateTime       @updatedAt
  client_edits           ClientEdit[]
  creatorClientId        String
  creatorClientProductId String
  fromClientCleanedBy    String
  ImplementationRatings  ClientRating[]
  hasZeroDepositOrder    Boolean
  hasTransparencyAll     Boolean
  isNotForUnder18        Boolean
  isDirty                Boolean
}

//TEMPLATES MODELS //////////////////////////////////////////////////////////////
